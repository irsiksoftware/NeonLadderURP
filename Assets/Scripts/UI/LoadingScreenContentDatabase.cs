using System.Collections.Generic;
using UnityEngine;

namespace NeonLadder.UI
{
    /// <summary>
    /// ScriptableObject database containing all loading screen models and tips
    /// Can be regenerated via Tools menu to automatically discover new prefabs
    /// </summary>
    [CreateAssetMenu(fileName = "LoadingScreenContentDatabase", menuName = "NeonLadder/Loading Screen Content Database")]
    public class LoadingScreenContentDatabase : ScriptableObject
    {
        [Header("Auto-Generated Content")]
        [SerializeField] private List<Loading3DModel> autoGeneratedModels = new List<Loading3DModel>();

        [Header("Generation Settings")]
        [SerializeField] private bool includeMinorEnemies = true;
        [SerializeField] private bool includeMajorEnemies = true;
        [SerializeField] private bool includeBossEnemies = true;
        [SerializeField] private bool includeBossTransformations = true;
        [SerializeField] private bool includeNPCs = false; // NPCs might not be suitable for loading screens
        [SerializeField] private bool includePlayers = true;

        [Header("Stored Generation Configuration")]
        [SerializeField] private StoredGenerationDefaults storedDefaults = new StoredGenerationDefaults();

        /// <summary>
        /// Get all loading models (auto-generated only)
        /// </summary>
        public List<Loading3DModel> GetAllModels()
        {
            return new List<Loading3DModel>(autoGeneratedModels);
        }

        /// <summary>
        /// Get all models including internal defaults (for editor use)
        /// </summary>
        public List<Loading3DModel> GetAllModelsIncludingDefaults()
        {
            return new List<Loading3DModel>(autoGeneratedModels);
        }

        /// <summary>
        /// Get only enabled models for loading screen use
        /// </summary>
        public List<Loading3DModel> GetEnabledModels()
        {
            var enabledModels = new List<Loading3DModel>();
            foreach (var model in GetAllModels())
            {
                if (model.enabled)
                {
                    enabledModels.Add(model);
                }
            }
            return enabledModels;
        }


        /// <summary>
        /// Get auto-generated models for inspection
        /// </summary>
        public List<Loading3DModel> GetAutoGeneratedModels()
        {
            return new List<Loading3DModel>(autoGeneratedModels);
        }

        /// <summary>
        /// Clear and regenerate auto-generated models (called by menu item)
        /// </summary>
        public void RegenerateAutoModels(List<Loading3DModel> newModels)
        {
            autoGeneratedModels.Clear();
            autoGeneratedModels.AddRange(newModels);

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
            #endif
        }

        /// <summary>
        /// Save generation settings for preservation during regeneration
        /// </summary>
        public void SaveGenerationSettings(LoadingScreenGenerationSettings settings)
        {
            // Update the generation settings
            includeMinorEnemies = settings.includeMinorEnemies;
            includeMajorEnemies = settings.includeMajorEnemies;
            includeBossEnemies = settings.includeBossEnemies;
            includeBossTransformations = settings.includeBossTransformations;
            includeNPCs = settings.includeNPCs;
            includePlayers = settings.includePlayers;

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
            #endif
        }

        /// <summary>
        /// Save generation defaults for preservation during regeneration
        /// </summary>
        public void SaveGenerationDefaults(StoredGenerationDefaults defaults)
        {
            storedDefaults = defaults;

            #if UNITY_EDITOR
            UnityEditor.EditorUtility.SetDirty(this);
            #endif
        }

        /// <summary>
        /// Get stored generation defaults
        /// </summary>
        public StoredGenerationDefaults GetStoredDefaults()
        {
            return storedDefaults;
        }


        /// <summary>
        /// Get generation settings for the menu tool
        /// </summary>
        public LoadingScreenGenerationSettings GetGenerationSettings()
        {
            return new LoadingScreenGenerationSettings
            {
                includeMinorEnemies = this.includeMinorEnemies,
                includeMajorEnemies = this.includeMajorEnemies,
                includeBossEnemies = this.includeBossEnemies,
                includeBossTransformations = this.includeBossTransformations,
                includeNPCs = this.includeNPCs,
                includePlayers = this.includePlayers
            };
        }
    }

    /// <summary>
    /// Settings for content generation
    /// </summary>
    [System.Serializable]
    public class LoadingScreenGenerationSettings
    {
        public bool includeMinorEnemies;
        public bool includeMajorEnemies;
        public bool includeBossEnemies;
        public bool includeBossTransformations;
        public bool includeNPCs;
        public bool includePlayers;
    }

    /// <summary>
    /// Runtime-compatible version of generation defaults for storage
    /// </summary>
    [System.Serializable]
    public class StoredGenerationDefaults
    {
        [Header("Global Defaults")]
        public Vector3 displayScale = Vector3.one;
        public float cameraDistanceOverride = 0f;
        public bool disableAnimator = false;
        public string animatorParameterName = "animation";
        public int animationValue = 0;

        [Header("Category Overrides")]
        public bool useMinorEnemyOverrides = false;
        public StoredModelDefaults minorEnemyDefaults = new StoredModelDefaults();

        public bool useMajorEnemyOverrides = false;
        public StoredModelDefaults majorEnemyDefaults = new StoredModelDefaults();

        public bool useBossOverrides = false;
        public StoredModelDefaults bossDefaults = new StoredModelDefaults();

        public bool useBossTransformationOverrides = false;
        public StoredModelDefaults bossTransformationDefaults = new StoredModelDefaults();

        public bool usePlayerOverrides = false;
        public StoredModelDefaults playerDefaults = new StoredModelDefaults();

        public bool useNPCOverrides = false;
        public StoredModelDefaults npcDefaults = new StoredModelDefaults();
    }

    /// <summary>
    /// Runtime-compatible version of model defaults for storage
    /// </summary>
    [System.Serializable]
    public class StoredModelDefaults
    {
        public Vector3 displayScale = Vector3.one;
        public Vector3 positionOffset = Vector3.zero;
        public float cameraDistanceOverride = 0f;
        public bool disableAnimator = false;
        public string animatorParameterName = "animation";
        public int animationValue = 0;
    }
}